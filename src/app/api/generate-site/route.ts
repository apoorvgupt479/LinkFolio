import { NextRequest, NextResponse } from 'next/server';

export async function POST(req: NextRequest) {
  try {
    const { resumeContent, userPrompt, useQualityModel } = await req.json();

    if (!resumeContent || !userPrompt || typeof useQualityModel === 'undefined') {
      return NextResponse.json({ error: 'Missing resume content or user prompt.' }, { status: 400 });
    }

    // Ensure resumeContent is in the expected format for inlineData
    if (!resumeContent.inlineData || !resumeContent.inlineData.data || !resumeContent.inlineData.mimeType) {
      return NextResponse.json({ error: 'Invalid resume content format. Expected { inlineData: { data: string, mimeType: string } }' }, { status: 400 });
    }

    const geminiApiKey = process.env.GEMINI_API_KEY;

    if (!geminiApiKey) {
      return NextResponse.json({ error: 'Gemini API key not configured.' }, { status: 500 });
    }

    const requestBody = {
      contents: [
        {
          parts: [
            {
              text: `You are given:\n\nResume content from a PDF:`,
            },
            {
              inlineData: {
                mimeType: resumeContent.inlineData.mimeType,
                data: resumeContent.inlineData.data,
              },
            },
            {
              text: `
Style or design prompt text: ${userPrompt}\nStyle the website according to the job description in the resume.

Task for Gemini:
Generate a complete, visually engaging, recruiter-optimized portfolio website in a single HTML file. Your responses should only be code, without explanation or formatting 
 
Strict guidelines:
- Code should not be having blank templates.
- All CSS and JS must be written within this HTML file, using <style> and <script> tags.
- Use external libraries (e.g., Bootstrap, Tailwind, Font Awesome, Typed.js, etc.) only via CDN within the HTML.
- Make the layout non-monotonous, user-friendly, and attention-grabbing.
- Prioritize content that matters most to recruiters: summary, experience, skills, education, etc.
- You are allowed to use stock images from the internet, just be sure the image link exists. Be sure to include a lot of supporting images with the text.
              `,
            },
          ],
        },
      ],
    };

    const modelName = useQualityModel ? 'gemini-2.5-flash' : 'gemini-2.0-flash'; // Use 2.5-flash for quality, 1.5-flash for speed

    const geminiResponse = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/${modelName}:generateContent?key=${geminiApiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      }
    );

    if (!geminiResponse.ok) {
      const errorData = await geminiResponse.json();
      console.error('Gemini API error:', errorData);
      return NextResponse.json({ error: errorData.error?.message || 'Failed to get response from Gemini API.' }, { status: geminiResponse.status });
    }

    const geminiData = await geminiResponse.json();
    const generatedText = geminiData.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!generatedText) {
      return NextResponse.json({ error: 'No content generated by Gemini API.' }, { status: 500 });
    }

    // Extract content within ```html block
    const htmlMatch = generatedText.match(/```html\n([\s\S]*?)\n```/);
    const html = htmlMatch ? htmlMatch[1] : generatedText; // If no match, use the whole text as fallback

    return NextResponse.json({ html });
  } catch (error: unknown) {
    console.error('Error generating site:', error);
    const errorMessage = error instanceof Error ? error.message : 'Failed to generate site.';
    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}
